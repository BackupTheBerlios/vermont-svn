--- /home/alex/uni/vermont-sctp/ipfixlolib/ipfixlolib.h	2007-09-18 11:26:05.000000000 +0000
+++ ipfixlolib/ipfixlolib.h	2007-09-19 18:10:06.000000000 +0000
@@ -1,3 +1,4 @@
+
 #ifndef IPFIXLOLIB_H
 #define IPFIXLOLIB_H
 /*
@@ -22,6 +23,9 @@
  jan@petranek.de
  */
 
+// whether to support writing raw packets as a series of files in a directory
+#define IPFIXLOLIB_RAWDIR_SUPPORT
+
 #include <stdio.h>
 #include <stdlib.h>
 #include <sys/types.h>
@@ -38,10 +42,9 @@
 #include <string.h>
 #include <netinet/sctp.h>
 
-
 #include "encoding.h"
 #include "ipfix_names.h"
-#include "msg.h"
+#include "common/msg.h"
 
 #ifdef __cplusplus
 extern "C" {
@@ -75,7 +78,7 @@ extern "C" {
  * 30 seconds:
  * can be specified by user
  */
-#define IPFIX_DEFAULT_TEMPLATE_TIMER 5
+#define IPFIX_DEFAULT_TEMPLATE_TIMER 20
 
 #define TRUE 1
 #define FALSE 0
@@ -90,7 +93,7 @@ extern "C" {
  * maximum size of a sendbuffer
  * TODO: This value is delibaretely chosen, adapt it if you need it or make it dynamic.
  */
-#define IPFIX_MAX_SENDBUFSIZE 512
+#define IPFIX_MAX_SENDBUFSIZE 1024
 
 /*
  * This macro appends data to the sendbuffer. If the sendbuffer is too small,
@@ -198,16 +201,19 @@ typedef struct {
 } ipfix_set_header;
 
 
-enum ipfix_transport_protocol {UDP, TCP, SCTP};
+enum ipfix_transport_protocol {
+#ifdef IPFIXLOLIB_RAWDIR_SUPPORT 
+	RAWDIR, 
+#endif
+	UDP, TCP, SCTP
+	};
 
 /*
  * These indicate, if a field is commited (i.e. can be used)
  * unused or unclean (i.e. data is not complete yet)
- * SENT (Template was sent) and WiTHDRAWN (Template destroyed) 
- * are used with SCTP, since Templates are sent only once
- * TOBEDELETED templates will be deleted the next time when the buffer is updated
+ *
  */
-enum ipfix_validity {UNUSED, UNCLEAN, COMMITED, SENT, WITHDRAWN, TOBEDELETED};
+enum ipfix_validity {UNUSED, UNCLEAN, COMMITED,SENT, WITHDRAWN, TOBEDELETED };
 
 /*
  * Manages a record set
@@ -255,13 +261,17 @@ typedef struct {
  * A collector receiving messages from this exporter
  */
 typedef struct {
-	int valid; // indicates, wheter this collector is valid. .
+	int valid; // indicates, whether this collector is valid. .
 	char ipv4address[16];
 	int port_number;
 	enum ipfix_transport_protocol protocol;
+	// warning! To use SCTP, we will need several ports!
 	int data_socket; // socket data is sent to
-	struct sockaddr_in addr;
 	int template_socket; // socket, templates are sent to
+#ifdef IPFIXLOLIB_RAWDIR_SUPPORT
+	char* packet_directory_path; /**< if protocol==RAWDIR: path to a directory to store packets in. Ignored otherwise. */
+	int packets_written; /**< if protcol==RAWDIR: number of packets written to packet_directory_path. Ignored otherwise. */
+#endif
 } ipfix_receiving_collector;
 
 /*
@@ -284,7 +294,6 @@ typedef struct {
 	uint32_t sequence_number;
 	uint32_t source_id;
 	ipfix_sendbuffer *template_sendbuffer;
-	ipfix_sendbuffer *sctp_template_sendbuffer;
 	ipfix_sendbuffer *data_sendbuffer;
 	int collector_num; // number of currently listening collectors
 	int collector_max_num; // maximum available collector
@@ -295,8 +304,6 @@ typedef struct {
 	uint32_t last_template_transmission_time;
 	// time, after templates are transmitted again
 	uint32_t template_transmission_timer;
-	// lifetime of an SCTP data packet
-	uint32_t sctp_lifetime;
 
 	int ipfix_lo_template_maxsize;
 	int ipfix_lo_template_current_count;
@@ -329,9 +336,6 @@ int ipfix_delete_data_fields_upto_marker
 int ipfix_put_template_data(ipfix_exporter *exporter, uint16_t template_id, void* data, uint16_t data_length);
 int ipfix_deinit_template_set(ipfix_exporter *exporter, ipfix_lo_template* templ);
 int ipfix_remove_template_set(ipfix_exporter *exporter, uint16_t template_id);
-int ipfix_set_template_transmission_timer(ipfix_exporter *exporter, uint32_t timer);
-// Sets a packet lifetime for SCTP data packets (unreliable packets)
-int ipfix_set_sctp_lifetime(ipfix_exporter *exporter, uint32_t lifetime);
 
 int ipfix_send(ipfix_exporter *exporter);
 
