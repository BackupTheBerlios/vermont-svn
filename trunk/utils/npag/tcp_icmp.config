
#this example file specifies two parallel streams



#first sender: send tcp packets
sender {
	#use the kernel s protocol implementation
	packet = kernel;

	#ipv4 specification
	ip {
		dst = 127.0.0.1;
		src = 127.0.0.1;
		ttl = 100;
		tos = 2;
	}

	tcp {
		sport = 5000;
		dport = 5002;
	}

	traffic {

		#send 70 packets each with a payload of 1000 bytes.
		#The payload is read from payload_file.txt (interpreted as bytes)
		#Wait 2.0 seconds after sending 70 packets.
		#Repeat it 20 times.

		pattern {
			sendpackets = 70;
			size = 1000;
			file_byte = payload_file.txt;
			delay = 2.0;
			repeat = 3;
		}

		#send 10 packets each with a payload of 100 bytes.
		#No payload file is specified, i.e. a random payload is generated
		#Wait 1.0 seconds after sending 2 packets.
		#Repeat it twice.

		pattern {
			sendpackets = 10;
			size = 100;
			delay = 3.0;
			repeat = 2;
			file_byte = payload_file2.txt;
		}

		#repeat this traffic patterns
		repeat = 1;
	}
}

#second sender: sends one ICMP message
sender {
	#do not use the kernel implementation of the protocols
	packet = raw;

	ip {
		dst = 127.0.0.1;
		src = 127.0.0.1;
		id = 1;
		ttl = 100;
		tos = 2;
	}

	icmp {
		type = 3;
		code = 0;
		id = 5555;
		seq = 5543;
	}

	traffic {

		#Read the data for the ICMP packet from the file icmp.HEX (content is interpreted
		# as HEX indicated by file_hex)
		pattern {
			sendpackets = 1;
			repeat = 0;
			delay = 0.0;
			size = 1000;
			file_hex = icmp.HEX;
		}

		repeat = 0;
	}
}
